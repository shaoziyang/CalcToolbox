object FormPCalcHelp: TFormPCalcHelp
  Left = 489
  Height = 558
  Top = 182
  Width = 567
  BorderStyle = bsDialog
  Caption = 'PCalc Help'
  ClientHeight = 558
  ClientWidth = 567
  Position = poOwnerFormCenter
  LCLVersion = '2.0.4.0'
  object Panel1: TPanel
    Left = 0
    Height = 558
    Top = 0
    Width = 567
    Align = alClient
    BevelInner = bvLowered
    BorderWidth = 4
    ClientHeight = 558
    ClientWidth = 567
    TabOrder = 0
    object mmoPCalcHelp: TMemo
      Left = 6
      Height = 546
      Top = 6
      Width = 555
      Align = alClient
      Font.CharSet = ANSI_CHARSET
      Font.Color = clBlack
      Font.Height = -12
      Font.Name = 'Courier New'
      Font.Pitch = fpFixed
      Font.Quality = fqDraft
      Lines.Strings = (
        'Programmable Calculator Simple Help'
        '(from TArtFormula)'
        ''
        '============================================================'
        'Computes symbolic expressions and provides runtime scripting'
        '============================================================'
        ''
        'Supports:'
        '   * 7 arithmetic operations'
        '   * 10 logical operations'
        '   * 6 bitwise operations'
        '   * string concatenation (@)'
        '   * LIKE operator (==)'
        '   * 24 arithmetic functions'
        '   * 10 statistical functions'
        '   * 2 logical functions'
        '   * 17 string functions'
        '   * 13 date functions'
        '   * 14 programming functions'
        '   * User defined constant'
        '   * User defined variables'
        '   * User defined functions (modules)'
        '   * Subroutines, global vars and constants'
        ''
        '-------------------------------------------------------------------------'
        'Arithmetic operations: '
        '     x + y, x - y, x * y, x / y, x % y (Mod), x ^ y (power), x\ y (Div)'
        ''
        '-------------------------------------------------------------------------'
        'String operations: '
        '     concatenation: s @ t'
        '     mask check:    s == t (or s like t)'
        ''
        '-------------------------------------------------------------------------'
        'Logical operations (true=1, false=0): '
        '     x > y, x < y, x >= y, x <= y, x = y, x <> y, ! x (not), x & y (and), '
        '     x | y (or), x xor y'
        ''
        '-------------------------------------------------------------------------'
        'Bitwise operations:'
        '     x && y (band), x || y (bor), !!x (bnot), x bxor y, x >> y (shr), '
        '     x << y (shl)'
        ''
        '-------------------------------------------------------------------------'
        'Predefined constants: '
        '     Pi  = 3.1415926535897932385'
        '     True = 1'
        '     False = 0'
        ''
        '-------------------------------------------------------------------------'
        'Functions: '
        '  sin, cos, tan, sinh, cosh, tanh, '
        '  asin, acos, atan, asinh, acosh, atanh,'
        '  sqrt, exp, log, lg  (log base 10), '
        '  int (integer part of a number), frac (fractional part of a number), '
        '  trunc (truncates value to a specified number of digits)'
        '  round (rounds value to a specified number of digits)'
        '  abs, sign, rnd, randomize'
        ' '
        '  max(x,y...), min(x,y,...), count(x,y,...),'
        '  sum(x,y,...), sumofsquares(x,y,...), avg(x,y,...), '
        '  variance(x,y,...), variancep(x,y,...), stddev(x,y,...), stddevp(x,y,...)'
        ''
        '  iff(cond,x,y) (if cond = true then result = x else result = y)'
        '  isnumber(x)'
        ''
        '  chr(x), length(s), trim(s), trimleft(s), trimright(s)'
        '  lowercase(s), uppercase(s), midstr(s,x,y), leftstr(s,x),'
        '  rightstr(s,x), pos(s,t), code(s), format(s,x), formatf(s,x),'
        '  stringofchar(c,n), concat(s1,s2,...), hex(s)'
        ''
        '  date(s), now, formatdate(s,d), year(d), month(d), day(d),'
        '  hour(d), minute(d), second(d), millisecond(d), isleapyear(n),'
        '  dayofweek(d), encodedate(y,m,d)'
        '-------------------------------------------------------------------------'
        'Programming:'
        '============'
        '  '
        '  Variables definitions:'
        '    Function style:'
        '       define(''name'',value), defines(''name1'', ''name2'',...)'
        '    Script style:   '
        '       var ''name1'', ''name2'', ... end'
        ''
        '  Variable value:'
        '    Function style:     val(''name'')'
        '    Script style:       $name'
        ' '
        ' Assignment statement:'
        '    Function style:     set(''name'',value)'
        '    Script style:       $name := value  '
        ''
        ' Increment and Decrement:'
        '    Function style:     inc(''name''),  dec(''name'')'
        '    Script style:       $name++;   $name--'
        ''
        ' Return function:  stop the program execution'
        ''
        'Compound statement:'
        '    Function style:     block(f1, f2, ... )'
        '    Script style:       BEGIN f1; f2; ... END'
        ''
        ' IF statement:'
        '    Function style:     condition(cond, f1, f2)'
        '    Script style:      '
        '        IF cond THEN f1 ELSE f2 END'
        '        IF cond THEN f ENDIF'
        ''
        ' WHILE loop:'
        '    Function style:    loop(cond, f)'
        '    Script style:      WHILE cond DO f WEND'
        ''
        ' UNTIL loop:'
        '    Function style:    till(f, cond)'
        '    Script style:      REPEAT f UNTIL cond END '
        ''
        ' FOR loop:'
        '    Function style:    series(init, cond, increment, statment)'
        '    Script style:      FOR init; cond; increment DO statment NEXT'
        ' '
        ' Interface functions:'
        '   msg(''text'',''caption'',props), input(''caption'', ''text'', defvalue)'
        ''
        '-------------------------------------------------------------------------'
        'Extended Programming:'
        '====================='
        ' '
        ' Constants definition:'
        ''
        '     Const <name1> = <value1 as remainder ot the string>'
        '              <name2> = <value2 as remainder ot the string> '
        '              ...'
        ''
        ' Global variables definitions:'
        ' '
        '    Global <varname1>[=<value1>], <varname2>[=<value2>],...'
        ' '
        ' Subroutine definition:'
        ''
        '    Sub <subname>([<param1>,<param2>...])'
        '     <formula>'
        ''
        '    Instead of SUB it is possible to use PROCEDIRE or FUNCTION keyword.'
        ''
        '-------------------------------------------------------------------------'
        'TArtFormula provides two styles of programming: formula style and scripting style.'
        'The first style assumes that all statements have the form of function call. '
        'The second style imply that you use common program language notation.'
        'For example: '
        ''
        '  block(defines(''i'',''n''), set(''n'',1), series(set(''i'',1), val(''i'')<=5, inc(''i''), set(''n'',val(''n'')*val(''i''))), msg(''5! = ''+val(''n''),''result'',0)) '
        ''
        '  Is equal to:'
        ''
        '  begin '
        '    var ''i'', ''n'' end;'
        '    $n:=1;'
        '    for $i:=1;  $i<=5;  $i++ do'
        '      $n := $n*$i;'
        '    next;'
        '    msg(''5! = ''+val(''n''),''result'',0);'
        '  end'
        ''
        ''
        ''
        ''
      )
      ParentFont = False
      ReadOnly = True
      ScrollBars = ssVertical
      TabOrder = 0
    end
  end
end
